{"version":3,"sources":["loading_bar.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","axios","require","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitHandler","setState","progressBar","submitted","positive","negative","neutral","self","assertThisInitialized","get","params","text","state","hashtag","then","response","data","series","e","console","log","url","hashtag_desc","tweets","results","inputHandler","target","value","showAnalysis","react_default","a","createElement","class","react_apexcharts_min_default","options","type","width","showLoadingBar","src","colors","labels","plotOptions","pie","donut","show","setInterval","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","_this2","stop","_callee2","_context2","renderTweets","map","item","i","color","label","key","username","style","margin-top","id","aria-describedby","placeholder","onChange","onClick","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ccd0060.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading_bar.25ef2804.gif\";","import React, { Component } from \"react\";\nimport './App.css';\nimport Chart from 'react-apexcharts'\n\nconst axios = require('axios');\nvar ProgressBar = require('progressbar.js');\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state = {\n            hashtag: \"\",\n            submitted: false,\n            progressBar: false,\n            options: {\n                colors: ['#F7464A', '#46BFBD', '#FDB45C'],\n                labels: ['Negative', 'Positive', 'Neutral'],\n                plotOptions: {\n                pie: {\n                  donut: {\n                    labels: {\n                      show: true\n                    }\n                  }\n                }\n              }\n            },\n            series: [44, 55, 41],\n            tweets: [],\n            hashtag_desc: \"\"\n        }\n    }\n    \n    async componentDidUpdate() {\n      var positive = 0\n        var negative = 0\n        var neutral = 0\n        var self = this;\n        try {        \n          setInterval(async () => {\n          axios.get('http://localhost:8000/analyzehashtag', {\n              params: {\n                  text: this.state.hashtag\n              }\n          }).then(function(response) {\n              negative = response.data.negative\n              positive = response.data.positive\n              neutral = response.data.neutral\n              self.setState({submitted: true});\n              self.setState({series: [negative, positive, neutral]});\n          });\n              }, 30000);\n          } catch(e) {\n            console.log(e);\n          }\n        \n        try {        \n          setInterval(async () => {\n          axios.get('http://localhost:8000/gettweets', {\n              params: {\n                  text: this.state.hashtag\n              }\n          }).then(function(response) {\n              console.log(response);\n              self.setState({tweets: response.data.results});\n          });\n              }, 30000);\n          } catch(e) {\n            console.log(e);\n          }\n      }\n    \n    submitHandler = () => {\n        this.setState({progressBar: true});\n        this.setState({submitted: false});\n        var positive = 0\n        var negative = 0\n        var neutral = 0\n        var self = this;\n        try {        \n          axios.get('http://localhost:8000/analyzehashtag', {\n              params: {\n                  text: this.state.hashtag\n              }\n          }).then(function(response) {\n              negative = response.data.negative\n              positive = response.data.positive\n              neutral = response.data.neutral\n              self.setState({submitted: true});\n              self.setState({progressBar: false});\n              self.setState({series: [negative, positive, neutral]});\n          });\n          } catch(e) {\n            console.log(e);\n          }\n        \n        try {        \n        var url = \"https://en.wikipedia.org/w/api.php?origin=*&action=opensearch&search=\" + this.state.hashtag + \"&limit=1&format=json\"\n          axios.get(url).then(function(response) {\n              self.setState({hashtag_desc: response.data[2][0]});\n          });\n          } catch(e) {\n            console.log(e);\n          }\n        \n        try {        \n          axios.get('http://localhost:8000/gettweets', {\n              params: {\n                  text: this.state.hashtag\n              }\n          }).then(function(response) {\n              self.setState({tweets: response.data.results});\n          });\n          } catch(e) {\n            console.log(e);\n          }\n        \n    }\n    \n    inputHandler = (e) => {\n        this.setState({hashtag: e.target.value});\n    }\n    \n    showAnalysis = () => {\n        if(this.state.submitted == true){\n            return(\n                <div class=\"row\">\n                <div class=\"col-sm-4\">\n                    <Chart options={this.state.options} series={this.state.series} type=\"donut\" width=\"420\" />\n                </div>\n                <div class=\"offset-sm-1 col-sm-7\">\n                <h1 class=\"heading_desc\">{this.state.hashtag_desc}</h1>\n                <br /><br />\n                </div>\n                </div>  \n            );\n        }\n    }\n    \n    showLoadingBar = () => {\n        if(this.state.progressBar){\n            return(\n                <div class=\"text-center\">\n                    <img src={require('./loading_bar.gif')} width=\"50\"/>\n                    <h2 class=\"progressheader\">Please Wait</h2>\n                </div>\n            );\n        }\n    }\n        \n    render() {\n        \n        var renderTweets = this.state.tweets.map(function(item, i){\n            var color = \"#46BFBD\";\n            \n            if(item.label == \"Neutral\"){\n                color = \"#FDB45C\";\n            }\n            if(item.label == \"Negative\"){\n                color = \"#F7464A\";\n            }\n              return (\n                    <div key={i} class=\"tweets\">\n                    <h2>@{item.username}</h2>\n                    <p>{item.text}</p>\n                    <h3 style={{\"color\": color}}>Predicted Sentiment - {item.label}</h3>\n                    </div>\n                  );\n            })\n        \n  return (\n      <div>\n          <div class=\"container\">\n              <h1 class=\"display-4 text-center\" style={{'margin-top':this.state.submitted?'5%':'30%'}}>Twitter Sentiment Analysis</h1>\n              <br /><br />\n                <div class=\"input-group mb-3\">\n                 <div class=\"input-group-prepend\">\n                    <span class=\"input-group-text hashtag-icon\" id=\"basic-addon1\">#</span>\n                  </div>\n                  <input type=\"text\" class=\"form-control hashtag\" id=\"basic-url\" aria-describedby=\"basic-addon3\" placeholder=\"Enter Hashtag to analyze\" onChange={this.inputHandler}/>\n              </div>\n              <br />\n              <div class=\"row\">\n                  <div class=\"col-sm-12\">\n                    <div class=\"text-center\">\n                      <button class=\"btn text-center btn-outline-secondary submit\" type=\"button\" onClick={this.submitHandler}>Analyze</button>\n                    </div>\n                  </div>\n                </div>\n                <br /><br /><br /><br />\n                {this.showAnalysis()}\n              {this.state.submitted?renderTweets:<br />}\n                {this.showLoadingBar()}\n          </div>\n          <div class=\"footer my-auto\">\n              <p>Made with <h1 class=\"fa fa-heart\" style={{\"color\": \"#00aced\"}}></h1> by Rohit Agrawal (<a href=\"https://github.com/agrawal-rohit\">Github</a>)</p>\n          </div>\n      </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}